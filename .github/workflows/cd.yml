name: Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/backend-server
  VERSION: ${{ github.sha }}
  NAME: backend-server

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      ## jdk setting
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      ## gradle caching
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      ## grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      ## gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      ## docker build & push to production
      - name: Docker build & push to prod
        run: |
          LOWERCASE_ACTOR=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
          echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u $LOWERCASE_ACTOR --password-stdin
          sudo docker buildx create --name arm64builder --use
          sudo docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/$LOWERCASE_ACTOR/backend-server:latest --push .
          sudo docker logout

  deploy:
    needs: build
    name: Deploy
    runs-on: [ self-hosted, deploy-backend ]
    steps:
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          script_stop: true
          script: |
            pwd
            ls -al
            cd actions-runner
            pwd
            if [[ "$(sudo docker ps -q --filter ancestor=mysql:8.0)" ]]; then
              sudo docker rm -f $(sudo docker ps -qa --filter ancestor=mysql:8.0)
            fi
            echo "pass mysql-container"
            if [[ "$(sudo docker ps -qa --filter ancestor=backend-deploy-test/backend-deploy-test-server:latest)" ]]; then
              sudo docker rm -f $(sudo docker ps -qa --filter ancestor=backend-deploy-test/backend-deploy-test-server:latest)
            fi
            echo "pass backend-deploy-test/backend-deploy-test-server:latest"
            echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            sudo docker pull ghcr.io/${{ github.actor }}/backend-server:latest
            sudo docker image prune -f
            sudo docker logout
