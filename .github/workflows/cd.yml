name: Deploy

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}/backend-server
  VERSION: ${{ github.sha }}
  NAME: backend-server
  SECURITY_GROUP_ID: sg-06eb575301c72bbf7  # 보안 그룹 ID 입력

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # 소스 코드를 체크아웃
      - uses: actions/checkout@v3

      # JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Docker 빌드 및 프로덕션에 푸시
      - name: Docker build & push to prod
        run: |
          LOWERCASE_ACTOR=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
          echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u $LOWERCASE_ACTOR --password-stdin
          sudo docker buildx create --name arm64builder --use
          sudo docker buildx build --platform linux/amd64,linux/arm64 -f Dockerfile -t ghcr.io/$LOWERCASE_ACTOR/backend-server:latest --push .
          sudo docker logout

  deploy:
    needs: build
    runs-on: [ self-hosted, deploy-backend ]  # AWS 인스턴스에서 GitHub Actions runner를 실행
    steps:
      # 현재 공용 IP 주소 확인
      - name: Get Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(curl -s http://checkip.amazonaws.com)
          echo "Public IP: $PUBLIC_IP"
          echo "::set-output name=public_ip::$PUBLIC_IP"

      # AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2  # AWS 리전 입력

      # 보안 그룹에 IP 추가
      - name: Add IP to security group
        run: |
          PUBLIC_IP=${{ steps.get_ip.outputs.public_ip }}
           RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids ${{ env.SECURITY_GROUP_ID }} --query "SecurityGroups[0].IpPermissions[?FromPort==\`22\` && ToPort==\`22\` && IpProtocol==\`tcp\` && IpRanges[?CidrIp==\`${PUBLIC_IP}/32\`]]" --output text)
          if [ -z "$RULE_EXISTS" ]; then
            aws ec2 authorize-security-group-ingress --group-id ${{ env.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${PUBLIC_IP}/32
          else
            echo "Security group rule already exists"
          fi

      # ghcr에 로그인
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      # 프로덕션에 배포
      - name: Deploy to prod
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          key_path: ""  # 사용하지 않음
          script_stop: true
          script: |
            pwd
            ls -al
            cd actions-runner
            pwd
            if [[ "$(sudo docker ps -q --filter ancestor=mysql:8.0)" ]]; then
              sudo docker rm -f $(sudo docker ps -qa --filter ancestor=mysql:8.0)
            fi
            echo "pass mysql-container"
            if [[ "$(sudo docker ps -qa --filter ancestor=ghcr.io/annsunghee/backend-server:latest)" ]]; then
              sudo docker rm -f $(sudo docker ps -qa --filter ancestor=ghcr.io/annsunghee/backend-server:latest)
            fi
            echo "pass backend-server"
            LOWERCASE_ACTOR=$(echo "${{ github.actor }}" | tr '[:upper:]' '[:lower:]')
            echo ${{ secrets.GHCR_TOKEN }} | sudo docker login ghcr.io -u $LOWERCASE_ACTOR --password-stdin
            sudo docker pull ghcr.io/$LOWERCASE_ACTOR/backend-server:latest
            sudo docker image prune -f
            sudo docker logout
            export DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            sudo docker-compose down
            sudo docker-compose up -d

      # 보안 그룹에서 IP 제거
      - name: Remove IP from security group
        run: |
          PUBLIC_IP=${{ steps.get_ip.outputs.public_ip }}
          RULE_EXISTS=$(aws ec2 describe-security-groups --group-ids ${{ env.SECURITY_GROUP_ID }} --query "SecurityGroups[0].IpPermissions[?FromPort==`22` && ToPort==`22` && IpProtocol==`tcp` && IpRanges[?CidrIp==`$PUBLIC_IP/32`]]" --output text)
          if [ -n "$RULE_EXISTS" ]; then
            aws ec2 revoke-security-group-ingress --group-id ${{ env.SECURITY_GROUP_ID }} --protocol tcp --port 22 --cidr ${PUBLIC_IP}/32
          else
            echo "Security group rule does not exist or already removed"
          fi
